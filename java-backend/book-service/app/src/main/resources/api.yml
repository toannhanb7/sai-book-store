openapi: 3.0.0
servers:
  - description: Book Service
    url: http://localhost:8080/api/v1

info:
  version: "1.0.0"
  title: Book Service API
  description: >-

security:
  - bearerAuth: []

paths:
  /books:
    get:
      summary: Get all books
      operationId: getAllBooks
      tags:
        - Book
      parameters:
        - in: query
          name: search
          required: false
          schema:
            type: string
          description: search book by name
        - in: query
          name: page
          required: false
          schema:
            type: integer
            default: 0
        - in: query
          name: size
          required: false
          schema:
            type: integer
            default: 20
        - in: query
          name: sortBy
          schema:
            type: string
            enum:
              - email
              - client
              - firstName
              - lastName
              - mobile
              - status
        - in: query
          name: sortDesc
          schema:
            type: boolean

      responses:
        '200':
          description: List of books
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookGetAll'
        '400':
          $ref: '#/components/responses/UnauthorizationResponse'
        '401':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalExceptionResponse'


  /book/{id}:
    parameters:
      - $ref: '#/components/parameters/BookIdPathParam'
    get:
      summary: Get book info
      operationId: getBookById
      tags:
        - Book
      responses:
        '200':
          description: Book info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          $ref: '#/components/responses/UnauthorizationResponse'
        '401':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalExceptionResponse'


components:
  schemas:
    BookGetAll:
      type: object
      properties:
        total:
          type: integer
          format: int64
        items:
          type: array
          items:
            $ref: '#/components/schemas/Book'

    Book:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        author:
          type: string
        description:
          type: string
        price:
          type: number
          format: double
        currency:
          type: string
        image:
          type: string



    RestError:
      type: object
      properties:
        code:
          type: string
          description: error code
        status:
          type: string
          description: http status
        message:
          type: string
          description: human readable message
        additionalInfo:
          type: string

    BooleanResponse:
      type: object
      properties:
        code:
          type: string
        status:
          type: boolean
        message:
          type: string

  parameters:
    BookIdPathParam:
      name: id
      in: path
      required: true
      schema:
        type: integer
        format: int64

  responses:
    BooleanStatusResponse:
      description: Boolean status
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BooleanResponse'
    InternalExceptionResponse:
      description: Internal Exception
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RestError'

    BadRequestResponse:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RestError'

    UnauthorizationResponse:
      description: Unauthorization
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RestError'

  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT